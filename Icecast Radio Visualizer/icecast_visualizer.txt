--@name FOXTEK Netstream Visualizer
--@author {Toby} + Feven
--@shared


local URL = "http://198.211.107.63:8000/steam"
local DECAY_FACTOR = 0.9
local ATTACK_FACTOR = 0.5

if SERVER then 
    hook.add("PlayerSay", "", function(ply, txt, _)
        local command = string.explode(" ", txt)
        if command[1] == ">vol" then
            local newVolume = tonumber(command[2])
            net.start("changeVol")
                net.writeFloat(newVolume)
            net.send(ply)
            return ""
        end
    end)
    
    local existingConnections = chip():getLinkedComponents()
    local hasScreen = false
    local hasHud = false
    local mdlScreen = "models/hunter/plates/plate2x2.mdl"
    local mdlHud = "models/maxofs2d/button_02.mdl"
    local screen
    local hud
    
    
    for k, v in ipairs(existingConnections) do
        if v:getClass() == "starfall_screen" then
            screen = v
            hasScreen = true
        end
        
        if v:getClass() == "starfall_hud" then
            hud = v
            hasHud = true
        end
    end
    
    if hasScreen then
        screen = prop.createComponent(screen:getPos(), screen:getAngles(), "starfall_screen", mdlScreen, true)
    else
        screen = prop.createComponent(chip():getPos() + Vector(0, 0, 65), chip():getAngles() + Angle(90, 0, 0), "starfall_screen", mdlScreen, true)
    end
    screen:linkComponent(chip())
    
    if hasHud then
        hud = prop.createComponent(hud:getPos(), hud:getAngles(), "starfall_hud", mdlHud, true)
    else
        hud = prop.createComponent(screen:getPos() + screen:getRight() * 55, screen:getAngles(), "starfall_hud", mdlHud, true)
    end
    hud:linkComponent(chip())
    
    chip():setPos(hud:getPos() + hud:getUp() * -1)
    chip():setAngles(hud:getAngles() + Angle(180, 0, 0))
    chip():setParent(screen)
    hud:setParent(screen)
end

if CLIENT then
    local fft_new = {}
    local fft_previous = {}
    local fft_smooth = {}
    local globalSound
    local fxlight = light.create( chip():getPos() + Vector(100, 0, 65), 512, 1, Color(255, 255, 255) )
    local fxbright = 0
    
    function playSong()
        local Sounds = {}
        local Volume = 1
        
        bass.loadURL(URL, "noblock", function(snd, err, errtxt)
            globalSound = snd
            if not isValid(snd) then return end

            net.receive("changeVol",function()
                Volume = net.readFloat()
            end)

            hook.add("Think", "ManageVolume", function()
                if snd == nil or not snd:isValid() then return end
                snd:setPos(chip():getPos())          
                snd:setVolume(Volume)
            end)

            snd:play()
            table.insert(Sounds,snd)
            if isValid(Sounds[2]) then
                Sounds[1]:stop()
                table.remove(Sounds,1) 
            end
        end)
    end
    
    local function quotaCheck(n)
        return math.max(quotaAverage(), quotaUsed()) < quotaMax()*n
    end
    
    local function ramCheck(n)
        return math.max(ramAverage(), ramUsed()) < ramMax()*n
    end
    
    hook.add("Think", "calculateFFT", function()
        if globalSound == nil or not globalSound:isValid() then
            return
        end
        
        -- Define a local function for smoothing the FFT values with attack and decay factors
        local function fft_smoothing(fft_previous, fft_new, attack_factor, decay_factor)
            local decayed_values = {}
            -- Iterate over each frequency bin of the FFT values
            for i, value in ipairs(fft_new) do
                if value > fft_previous[i] then
                    -- Apply attack factor to smoothly increase the value
                    local decayed_value = fft_previous[i] + ((value - fft_previous[i]) * attack_factor)
                    table.insert(decayed_values, decayed_value)
                else
                    -- Apply decay factor to gradually decrease the value
                    local decayed_value = fft_previous[i] * decay_factor
                    table.insert(decayed_values, decayed_value)
                end
            end
            
            return decayed_values  -- Return the smoothed FFT values
        end
        
        -- Check if the previous FFT values table is empty
        if next(fft_previous) == nil then
            -- If empty, initialize fft_smooth with current FFT values
            fft_smooth = globalSound:getFFT(3)
        end
        fft_previous = fft_smooth
        fft_new = globalSound:getFFT(3)
        
        fft_smooth = fft_smoothing(fft_previous, fft_new, ATTACK_FACTOR, DECAY_FACTOR)
        
    end)
    
    hook.add("render", "", function()
        if not hasPermission("bass.loadURL", URL) or not hasPermission("bass.play2D") then return end
        if globalSound == nil or not globalSound:isValid() then return end
        
        if not quotaCheck(0.5) or not ramCheck(0.5) then return end
        render.enableDepth(true)
        local saturation = 0
        local multiplier = 3
        fxbright = fft_smooth[4] or 0
        render.setColor(Color(0, saturation, (fft_smooth[2] or 0) * multiplier):hsvToRGB()) 
        render.draw3DBox(Vector(0, 512, 0), Angle(), Vector(), Vector(512 * 2))
            
        render.setColor(Color(0, saturation, (fft_smooth[3] or 0) * multiplier):hsvToRGB()) 
        render.draw3DBox(Vector(512, 512, 0), Angle(0, 0, 90), Vector(), Vector(512))
        render.draw3DBox(Vector(-512, 512, 0), Angle(0, 0, 90), Vector(), Vector(512))
                    
        render.setColor(Color(0, saturation, (fft_smooth[4] or 0) * multiplier):hsvToRGB()) 
        render.draw3DBox(Vector(0, 0, 0), Angle(0, 0, 90), Vector(), Vector(512)) 
            
        render.setColor(Color(0, saturation, (fft_smooth[5] or 0) * multiplier):hsvToRGB()) 
        render.draw3DBox(Vector(0, 512, 512), Angle(0, 0, 90), Vector(), Vector(512))
        
        local amplitude = 900 -- default 350
        local hueamp = 1
        local satamp = 10
        for i = 0, 49, 1 do
            render.setColor(Color(i * (360 / 50), 1, (fft_smooth[i + 1] or 0) * satamp):hsvToRGB())
            render.draw3DBox(
                Vector((i % 10) * (512 / 10), 512 - (50 + (fft_smooth[i + 1] or 0) * amplitude), 512 - math.floor(i / 10) * (512 / 10) - 200),
                Angle(),
                Vector(),
                Vector((512 / 10), 50 + (fft_smooth[i + 1] or 0) * amplitude, (512 / 10))
            )
        end
    end)
    
    hook.add("hudconnected", "AutoRequestPerms", function()
        if not hasPermission("bass.loadURL", URL) or not hasPermission("bass.play2D") then
            setupPermissionRequest({"bass.loadURL", "bass.play2D"}, "URL sounds from external sites and 2d sounds")
            sendPermissionRequest()
        end
        hook.remove("hudconnected", "AutoRequestPerms") -- Starfall only lets you request perms once, so remove the hook after the first time
    end)
    
    hook.add("hudconnected", "StartMusicOnReconnect", function()
        if hasPermission("bass.loadURL", URL) and hasPermission("bass.play2D") then
            playSong()
        end
    end)
    
    hook.add("huddisconnected", "StopMusic", function()
        if globalSound == nil then return end
        if not globalSound:isValid() then return end
        globalSound:stop()
    end)
    
    hook.add("permissionrequest", "permission", function()
        if hasPermission("bass.loadURL", URL) and hasPermission("bass.play2D") then
            playSong()
        end
    end)
    
    hook.add("think", "renderlight", function()
        fxlight:setPos(chip():getPos() + Vector(100, 0, 65))
        fxlight:setSize(fxbright * 4096)
        fxlight:draw()
    end)
end