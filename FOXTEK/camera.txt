--@name Camera
--@author FOXTEK (Feven Kitsune)
--@shared

if SERVER then
    local screen = prop.createComponent(chip():getPos() + Vector(0, 0, 65), chip():getAngles() + Angle(90, 0, 0), "starfall_screen", "models/hunter/plates/plate2x2.mdl", true)
    screen:linkComponent(chip())
    constraint.weld(screen, chip())
    
    local camera = prop.create(chip():getPos() + Vector(0, 0, 65), chip():getAngles() + Angle(), "models/dav0r/camera.mdl", true)
    local lighting = prop.create(chip():getPos() + Vector(50, 0, 100), chip():getAngles() + Angle(), "models/sprops/misc/axis_plane.mdl", true)

    net.receive("clientInitialized", function(len, ply)
        print("Client " .. ply:getName() .. " is ready. Sending camera data.")
        net.start("sendCameraEntity")
        net.writeEntity(camera)
        net.writeEntity(lighting)
        net.send(ply)
    end)
end

if CLIENT then
    if player() ~= owner() then return end
    
    local benchmarkMode = false
    local points = {}
    local pixelsize = 16
    local camera
    local lighting
    local FOV = 45
    local renderDistance = 4096
    local cameraResolutionX, cameraResolutionY = 1024, 1024
    local viewportRayTargetX, viewportRayTargetY = 1, 1
    local lightColor = Vector( 1 )
    local intensity = 3
    local backgroundColor = Color( 0, 0, 0 )
    
    net.receive("sendCameraEntity", function(len, ply)
        print("Camera found!")
        camera = net.readEntity()
        lighting = net.readEntity()
    end)
    
    local function quotaCheck(n)
        return math.max(quotaAverage(), quotaUsed()) < quotaMax() * n
    end
    
    render.createRenderTarget("drawBuffer")
    local renderTimeStart = timer.systime()
    local renderTimeEnd = 0
    local renderComplete = false
    hook.add("render", "", function()
        -- Function localizations
        local min = math.min
        local max = math.max
        local pow = math.pow
        local aimVector = trace.aimVector
        local line = trace.line
        local setColor = render.setColor
        local drawRectFast = render.drawRectFast
        
        render.selectRenderTarget()
        render.setRenderTargetTexture("drawBuffer")
        render.drawTexturedRect(0, 0, 512, 512)
        
        if camera == nil or not camera:isValid() or lighting == nil or not lighting:isValid() then return end
        local cameraAngles = camera:getAngles()
        local cameraPos = camera:getPos()
        local lightPos = lighting:getPos()
        
        render.selectRenderTarget("drawBuffer")
        while quotaCheck(0.9) do
            -- Increment scanline by 1.
            viewportRayTargetX = viewportRayTargetX + pixelsize
            
            -- Scanline code. 
            if viewportRayTargetX > cameraResolutionX then
                -- Scanline has reached end of line, return scanline to start of next line.
                viewportRayTargetX = 1
                viewportRayTargetY = viewportRayTargetY + pixelsize
            end
            if viewportRayTargetY > cameraResolutionY then
                -- Scanline has reached the bottom of the frame, return scanline to top of frame.
                renderTimeEnd = timer.systime()
                renderComplete = true
                viewportRayTargetY = 1
            end
            
            -- Compute aim vector from 2D screen space based on the current scanline point.
            local screenDirectionVector = aimVector(cameraAngles, FOV, viewportRayTargetX, viewportRayTargetY, cameraResolutionX, cameraResolutionY)
            -- Send trace from camera prop based on computed aim vector.
            local ray = line(cameraPos + (screenDirectionVector * 15), cameraPos + (screenDirectionVector * renderDistance))
            
            -- Push pixel to render target.
            if ray["Hit"] then
                local ent = ray["Entity"]
                -- BlinnPhong Lighting
                
                -- Calculate light direction and distance relative to hit position
                local lightDirection = lightPos - ray["HitPos"]
                local distance = lightDirection:getLength() / 64
                lightDirection:normalize()
                
                -- Calculate view position relative to hit position
                local viewDirection = (cameraPos + (screenDirectionVector * 15)) - ray["HitPos"]
                viewDirection:normalize()
                
                -- Calculate Blinn-Phong halfway direction
                local halfwayDirection = lightDirection + viewDirection
                halfwayDirection:normalize()
                
                -- Calculate specular component
                local specular = Vector(pow(max(ray["HitNormal"]:dot(halfwayDirection), 0.0), 16) * intensity)
                specular:vmul(lightColor)
                specular:vdiv(Vector(distance))
                
                -- Calculate diffuse component
                local diffuse = Vector(max(ray["HitNormal"]:dot(lightDirection), 0.0) * intensity)
                diffuse:vmul(lightColor)
                diffuse:vdiv(Vector(distance))
                
                local entColor = ent:getColor()
                local hdrColor = specular + diffuse
                hdrColor:vmul(entColor / 255)
                
                -- Reinhard tone mapping
                local mapped = hdrColor / (hdrColor + Vector(1))
                mapped[1] = mapped[1] ^ (1/2.2)
                mapped[2] = mapped[2] ^ (1/2.2)
                mapped[3] = mapped[3] ^ (1/2.2)
                mapped:vmul(Vector(255))
                -- Return color to RGB colorspace
                
                setColor(Color(mapped[1], mapped[2], mapped[3]))
            else
                setColor(backgroundColor)
            end

            drawRectFast(viewportRayTargetX, viewportRayTargetY, pixelsize, pixelsize)
        end
        
        if renderComplete and benchmarkMode then
            renderComplete = false
            print(renderTimeEnd - renderTimeStart)
            renderTimeStart = timer.systime()
        end
    end)
    
    print("Client ready! Requesting camera...")
    net.start("clientInitialized")
    net.send()
end