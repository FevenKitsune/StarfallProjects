--@name Camera
--@author FOXTEK (Feven Kitsune)
--@shared

if SERVER then
    local screen = prop.createComponent(chip():getPos() + Vector(0,0,65), chip():getAngles() + Angle(90,0,0), "starfall_screen", "models/hunter/plates/plate2x2.mdl", true)
    screen:linkComponent(chip())
    constraint.weld(screen, chip())
    
    local camera = prop.create( chip():getPos() + Vector(0,0,65), chip():getAngles() + Angle(), "models/dav0r/camera.mdl", true )
    local lighting = prop.create( chip():getPos() + Vector(50,0,100), chip():getAngles() + Angle(), "models/sprops/misc/axis_plane.mdl", true )

    net.receive("clientInitialized", function(len, ply)
        print("Client " .. ply:getName() .. " is ready. Sending camera data.")
        net.start("sendCameraEntity")
        net.writeEntity(camera)
        net.writeEntity(lighting)
        net.send(ply)
    end)
end

if CLIENT then
    local points = {}
    local pixelsize = 16
    local camera
    local lighting
    local FOV = 45
    local renderDistance = 2048
    local cameraResolutionX, cameraResolutionY = 1024, 1024
    local viewportRayTargetX, viewportRayTargetY = 1, 1
    local lightColor = Vector( 1 )
    local intensity = 14
    
    net.receive("sendCameraEntity", function(len, ply)
        print("Camera found!")
        camera = net.readEntity()
        lighting = net.readEntity()
    end)
    
    local function quotaCheck(n)
        return math.max(quotaAverage(), quotaUsed()) < quotaMax()*n
    end
    
    render.createRenderTarget("drawBuffer")
    
    local function colorToVector3(color)
        return Vector(color[1], color[2], color[3])
    end
    
    local function vector3ToColor(vector)
        return Color(vector[1], vector[2], vector[3])
    end
        
    hook.add("render", "", function()
        render.selectRenderTarget()
        render.setRenderTargetTexture("drawBuffer")
        render.drawTexturedRect(0, 0, 512, 512)
        
        while (quotaCheck(0.9)) do
            render.selectRenderTarget("drawBuffer")
            if camera == nil or not camera:isValid() or lighting == nil or not lighting:isValid() then return end
            
            -- Increment scanline by 1.
            viewportRayTargetX = viewportRayTargetX + pixelsize
            
            -- Scanline code. 
            if viewportRayTargetX > cameraResolutionX then
                -- Scanline has reached end of line, return scanline to start of next line.
                viewportRayTargetX = 1
                viewportRayTargetY = viewportRayTargetY + pixelsize
            end
            if viewportRayTargetY > cameraResolutionY then
                -- Scanline has reached the bottom of the frame, return scanline to top of frame.
                viewportRayTargetY = 1
            end
            
            -- Compute aim vector from 2D screen space based on the current scanline point.
            local screenDirectionVector = trace.aimVector( camera:getAngles(), FOV, viewportRayTargetX, viewportRayTargetY, cameraResolutionX, cameraResolutionY)
            -- Send trace from camera prop based on computed aim vector.
            local ray = trace.line( camera:getPos() + (screenDirectionVector * 15), camera:getPos() + (screenDirectionVector * renderDistance) )
            
            -- Push pixel to render target.
            if ray["Hit"] then
                local ent = ray["Entity"]
                -- BlinnPhong Lighting
                
                -- Calculate light direction and distance relative to hit position
                local lightDirection = lighting:getPos() - ray["HitPos"]
                local distance = lightDirection:getLength() / 16
                lightDirection:normalize()
                
                -- Calculate view position relative to hit position
                local viewDirection = (camera:getPos() + (screenDirectionVector * 15)) - ray["HitPos"]
                viewDirection:normalize()
                
                -- Calculate Blinn-Phong halfway direction
                local halfwayDirection = lightDirection + viewDirection
                halfwayDirection:normalize()
                
                -- Calculate specular component
                local spec = math.pow( math.max( ray["HitNormal"]:dot(halfwayDirection), 0.0), 16)
                local specular = (intensity * spec * lightColor) / distance
                
                -- Calculate diffuse component
                local diff = math.max ( ray["HitNormal"]:dot(lightDirection), 0.0 )
                local diffuse = (intensity * diff * lightColor) / distance
                
                -- Convert entity RGB colorspace to vector3 floating form
                local entColor = colorToVector3(ent:getColor()) / Vector(255)
                
                local hdrColor = (specular + diffuse) * entColor
                
                // Reinhard tone mapping
                local mapped = hdrColor / (hdrColor + Vector(1))
                mapped = Vector(mapped[1] ^ 1/2.2, mapped[2] ^ 1/2.2, mapped[3] ^ 1/2.2)
                
                -- Return color to RGB colorspace
                mapped = mapped * 255
                mapped = vector3ToColor(mapped)
                
                render.setColor( mapped )
            else
                render.setColor( Color(0, 0, 0) )
            end
            render.drawRectFast(viewportRayTargetX, viewportRayTargetY, pixelsize, pixelsize)
        end
    end)
    
    print("Client ready! Requesting camera...")
    net.start("clientInitialized")
    net.send()
end