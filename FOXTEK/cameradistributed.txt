--@name Camera Distributed
--@author FOXTEK (Feven Kitsune)
--@shared

local cameraResolutionX, cameraResolutionY = 1024, 1024
local pixelsize = 2
local DEBUG = false

if SERVER then
    local pixelbuffer = {}
    local availableClients = {}
    
    -- 0 = unrendered, 1 = in progress, 2 = finished
    local workerStatus = {}
    for i = 1, cameraResolutionY / pixelsize do
        workerStatus[i] = 0
    end
    
    local screen = prop.createComponent(chip():getPos() + Vector(0, 0, 65), chip():getAngles() + Angle(90, 0, 0), "starfall_screen", "models/hunter/plates/plate2x2.mdl", true)
    screen:linkComponent(chip())
    constraint.weld(screen, chip())
    
    local camera = prop.create(chip():getPos() + Vector(0, 0, 65), chip():getAngles() + Angle(), "models/dav0r/camera.mdl", true)
    local lighting = prop.create(chip():getPos() + Vector(50, 0, 100), chip():getAngles() + Angle(), "models/sprops/misc/axis_plane.mdl", true)

    net.receive("clientInitialized", function(len, ply)
        -- Client has finished loading and is ready to recieve the camera and light entities.
        if DEBUG then printConsole("Client " .. ply:getName() .. " is ready. Sending camera data.") end
        net.start("sendCameraEntity")
        net.writeEntity(camera)
        net.writeEntity(lighting)
        net.send(ply)
        
        -- Add player to the list of available clients.
        table.insert(availableClients, ply)
    end)
    
    net.receive("readyForWorker", function(len, ply)
        if DEBUG then printConsole("Client " .. ply:getName() .. " is requesting a new worker.") end
        local returnedRow = net.readInt(16)
        if returnedRow ~= 0 then
            -- Client returned row data, extract color data and insert into SERVER pixel buffer.
            local dataBufferLength = net.readUInt(16)
            local dataBuffer = net.readData(dataBufferLength)
            printConsole("Sending back: " .. #dataBuffer)
            -- TODO: How do I insert into the SERVER pixel buffer at the correct index offset?
            if DEBUG then printConsole("Client " .. ply:getName() .. " has returned image data for row " .. tostring(returnedRow)) end
            printConsole("Client " .. ply:getName() .. " has returned image data for row " .. tostring(returnedRow))
            workerStatus[returnedRow] = 2
            -- What if I just send the table back to all clients?
            net.start("rowDataAvailable")
            net.writeInt(returnedRow, 16)
            net.writeUInt(dataBufferLength, 16)
            net.writeData(dataBuffer, dataBufferLength)
            net.send()
        end

        -- FOR DEBUG PURPOSES
        --if ply ~= owner() then return end
        -- TODO: This code determines what row the client should do next. This needs to be rewritten as it currently only has each client cycle from row 1 to max row.
        
        -- Find the next available worker
        local nextWorker = -1
        for i = 1, #workerStatus do
            if workerStatus[i] == 0 then
                nextWorker = i
                break
            end
        end
        
        
        if nextWorker == -1 then
            -- If there is no more work to be done, but there are some rows not finished, then everyone start working on that.
            for i = 1, #workerStatus do
                if workerStatus[i] == 1 then
                    nextWorker = i
                    break
                end
            end
        end
        
        if nextWorker == -1 then
            print("No more work!")
            return
        end
        
        workerStatus[nextWorker] = 1
        
        net.start("createWorker")
        if DEBUG then printConsole("Requesting row " .. tostring(nextWorker + 1) .. " from client " .. ply:getName()) end
        net.writeInt(nextWorker, 16)
        net.send(ply)
    end)
end

if CLIENT then    
    --if player() ~= owner() then return end

    local benchmarkMode = true
    local points = {}
    local camera
    local lighting
    local FOV = 45
    local renderDistance = 4096
    local viewportRayTargetX, viewportRayTargetY = 1, 1
    local lightColor = Vector(1)
    local intensity = 3
    local backgroundColor = Color(0, 0, 0)
    local pixelbuffer = {}
    local rowbuffer = {}
    local pixelStream
    
    -- Metatable function to return a default color value if the table lookup misses.
    function setDefault(t, d)
      local mt = {__index = function () return d end}
      setmetatable(t, mt)
    end
    
    setDefault(pixelbuffer, Color(0, 0, 255))
    
    net.receive("rowDataAvailable", function(len, ply)
        local rowNumber = net.readInt(16)
        local colorDataSize = net.readUInt(16)
        local colorData = net.readData(colorDataSize)
        colorData = bit.decompress(colorData)
        local colorStream = bit.stringstream(colorData)
        local i
        for i = 1, colorStream:size() / 3 do
            local R = colorStream:readUInt8()
            local G = colorStream:readUInt8()
            local B = colorStream:readUInt8()
            pixelbuffer[(rowNumber - 1) * (cameraResolutionX / pixelsize) + i] = Color(R, G, B)
        end
    end)
    
    net.receive("sendCameraEntity", function(len, ply)
        -- Server has responded to request for camera and light entities. Store these in local values and request a work order.
        print("Camera found!")
        camera = net.readEntity()
        lighting = net.readEntity()
        net.start("readyForWorker")
        -- Work order 0 means client has not worked on previous job before.
        net.writeInt(0, 16)
        net.send()
    end)
    
    local function quotaCheck(n)
        return math.max(quotaAverage(), quotaUsed()) < quotaMax() * n
    end
    
    local renderPixelBuffer
    
    render.createRenderTarget("drawBuffer")
    local renderTimeStart = timer.systime()
    local renderTimeEnd = 0
    local renderComplete = false
    local function renderHook()
        -- Hook that draws the local CLIENT pixelbuffer onto the attached screen.
        -- Function localizations
        local min = math.min
        local max = math.max
        local pow = math.pow
        local aimVector = trace.aimVector
        local line = trace.line
        local setColor = render.setColor
        local drawRectFast = render.drawRectFast
        
        render.selectRenderTarget()
        render.setRenderTargetTexture("drawBuffer")
        render.drawTexturedRect(0, 0, 512, 512)
        
        if renderPixelBuffer == nil then
            renderPixelBuffer = coroutine.wrap( function()
                while true do
                    local cameraAngles = camera:getAngles()
                    local cameraPos = camera:getPos()
                    local lightPos = lighting:getPos()
                    for i = 1, (cameraResolutionX / pixelsize) * (cameraResolutionY / pixelsize) do
                        if not quotaCheck(0.8) then
                            coroutine.yield()
                        end
                        --print(i) 
                        --print(((i-1)*pixelsize)%cameraResolutionX,math.floor(((i-1))/cameraResolutionX)*pixelsize)
                        render.selectRenderTarget("drawBuffer")
                        setColor(pixelbuffer[i])
                        --print("DRAW", ((i - 1) * pixelsize) % 1024, math.floor(((i - 1) * pixelsize) / 1024) * pixelsize)
                        drawRectFast(((i - 1) * pixelsize) % 1024, math.floor(((i - 1) * pixelsize) / 1024) * pixelsize, pixelsize, pixelsize)
                    end
                    --print("Frame done!")
                end
                return true
            end)
        end
        
        if camera == nil or not camera:isValid() or lighting == nil or not lighting:isValid() then return end
        if quotaCheck(0.8) then renderPixelBuffer() end
        
        if renderComplete and benchmarkMode then
            renderComplete = false
            --printTable(pixelbuffer)
            print(renderTimeEnd - renderTimeStart)
            renderTimeStart = timer.systime()
        end
    end
    
    local function renderWorker(row)
        -- Worker coroutine. Populates table rowbuffer with data to be sent to the server.
        local min = math.min
        local max = math.max
        local pow = math.pow
        local aimVector = trace.aimVector
        local line = trace.line
        local cameraAngles = camera:getAngles()
        local cameraPos = camera:getPos()
        local lightPos = lighting:getPos()
        pixelStream = bit.stringstream()
        
        for column = 1, cameraResolutionX / pixelsize do
            if not quotaCheck(0.8) then
                coroutine.yield()
            end
            --print(column * pixelsize, row * pixelsize)
            -- Compute aim vector from 2D screen space based on the current scanline point.
            local screenDirectionVector = aimVector(cameraAngles, FOV, (column - 1) * pixelsize, (row - 1) * pixelsize, cameraResolutionX, cameraResolutionY)
            -- Send trace from camera prop based on computed aim vector.
            local ray = line(cameraPos + (screenDirectionVector * 15), cameraPos + (screenDirectionVector * renderDistance))
            local pixelcolor
            -- Push pixel to render target.
            if ray["Hit"] then
                local ent = ray["Entity"]
                -- BlinnPhong Lighting
                
                -- Calculate light direction and distance relative to hit position
                local lightDirection = lightPos - ray["HitPos"]
                local distance = lightDirection:getLength() / 64
                lightDirection:normalize()
                
                -- Calculate view position relative to hit position
                local viewDirection = (cameraPos + (screenDirectionVector * 15)) - ray["HitPos"]
                viewDirection:normalize()
                
                -- Calculate Blinn-Phong halfway direction
                local halfwayDirection = lightDirection + viewDirection
                halfwayDirection:normalize()
                
                -- Calculate specular component
                local specular = Vector(pow(max(ray["HitNormal"]:dot(halfwayDirection), 0.0), 16) * intensity)
                specular:vmul(lightColor)
                specular:vdiv(Vector(distance))
                
                -- Calculate diffuse component
                local diffuse = Vector(max(ray["HitNormal"]:dot(lightDirection), 0.0) * intensity)
                diffuse:vmul(lightColor)
                diffuse:vdiv(Vector(distance))
                
                local entColor = ent:getColor()
                local hdrColor = specular + diffuse
                hdrColor:vmul(entColor / 255)
                
                -- Reinhard tone mapping
                local mapped = hdrColor / (hdrColor + Vector(1))
                mapped[1] = mapped[1] ^ (1/2.2)
                mapped[2] = mapped[2] ^ (1/2.2)
                mapped[3] = mapped[3] ^ (1/2.2)
                mapped:vmul(Vector(255))
                -- Return color to RGB colorspace
                
                pixelcolor = Color(mapped[1], mapped[2], mapped[3])
            else
                -- Ray not hit color
                pixelcolor = backgroundColor
            end
            pixelStream:writeUInt8(pixelcolor[1])
            pixelStream:writeUInt8(pixelcolor[2])
            pixelStream:writeUInt8(pixelcolor[3])
            --rowbuffer[column] = pixelcolor
            --pixelbuffer[(row - 1) * (cameraResolutionX / pixelsize) + column] = pixelcolor
            --print((row - 1) * (cameraResolutionX / pixelsize) + column)
        end
        
        -- All columns have finished rendering, end coroutine.
        return true
    end
    
    net.receive("createWorker", function()
        -- Server has requested a new worker for the given row. Create a worker coroutine and monitor its status.
        local row = net.readInt(16)
        local renderField = coroutine.wrap(renderWorker)
        
        hook.add("think", "workerMonitor", function()
            -- Monitor worker status. Once worker has finished, remove think hook and send rendered data to server.
            if camera == nil or not camera:isValid() or lighting == nil or not lighting:isValid() then return end
            if quotaCheck(0.8) and renderField(row) then
                hook.remove("think", "workerMonitor")
                if DEBUG then printConsole("Worker " .. tostring(row) .. " finished!") end
                local data = pixelStream:getString()
                local compressedData = bit.compress(data)
                printConsole(#compressedData)
                net.start("readyForWorker")
                net.writeInt(row, 16)
                net.writeUInt(#compressedData, 16)
                net.writeData(compressedData, #compressedData)
                net.send()
            end
        end)
    end)

    timer.create("distanceCulling", 0.5, 0, function()
        -- Performance optimization for other clients on the server. If a client is out of range, do not render screen.
        if player():getPos():getDistance(chip():getPos()) < 500 then
            hook.add("render", "rayTracer", renderHook)
        else
            hook.remove("render", "rayTracer")
        end
    end)
    
    print("Client ready! Requesting camera...")
    net.start("clientInitialized")
    net.send()
end