--@name Multibounce
--@author Feven Kitsune
--@client

local Laser = class("Laser")
function Laser:initialize(startPos, endPos)
    self.startPos = startPos
    self.endPos = endPos
    
    self.xSize = 0.05
    self.ySize = 0.05
    
    self.Line = holograms.create( chip():getPos(), Angle(), "models/holograms/cube.mdl", Vector(1, self.xSize, self.ySize) )
    self.CubeSize = self.Line:obbSize()[2]
    self.Line:suppressEngineLighting(true)
end

function Laser:think(parent)
    local rayMidPoint = (self.startPos + self.endPos) / 2
    self.Line:setPos( rayMidPoint )
    self.Line:setAngles( (self.endPos - self.startPos):getAngle() )
    self.Line:setScale( Vector( (self.endPos - self.startPos):getLength() / self.CubeSize, self.xSize, self.ySize ) )
end

function Laser:setEndPos(v) self.endPos = v end
function Laser:setStartPos(v) self.startPos = v end
function Laser:updatePos(s, e)
    self.startPos = s
    self.endPos = e
end

local traceDistance = 1024

lasers = {}
local c = 200

-- Compute the next bounce ray based on input position and normal vectors.
local function computeBounce(n, position, direction)
    if n == 0 then return end
    local ray = trace.line(position, position + (direction * traceDistance))
    local inDirection = ray["HitPos"] - position
    inDirection:normalize()
    local outDirection = inDirection-Vector(2)*ray["HitNormal"]*Vector(inDirection:dot(ray["HitNormal"]))
    --table.insert(lasers, Laser:new(position, ray["HitPos"]))
    --print(c-n + 1)
    lasers[c-n + 1]:updatePos(position, ray["HitPos"])
    computeBounce(n-1, ray["HitPos"], outDirection)
end

for i = 1, c do
    lasers[i] = Laser:new(Vector(0), Vector(0))
end

hook.add("tick", "update_laser", function()
    computeBounce(c, chip():getPos() + chip():getUp()*10, chip():getUp())
    for k = 1, #lasers do
        lasers[k]:think(chip())
    end
end)