--@name Mandelbrot Set
--@author Feven Kitsune
--@client

-- Rendering workflow forked from: https://github.com/anormaltwig/public-starfallex-code/blob/main/scripts/pathtracer.txt
-- Algorithm details: https://theses.liacs.nl/pdf/2018-2019-JonckheereLSde.pdf

local resolution = 1024
local drawRoutines = {}
local maxCPU = cpuMax() * (SERVER and 0.69 or 0.7)

local function drawRoutine() -- since this isn't going to be distributed for now, I don't need to worry about chunks.
    -- variables
    local x1 = 0
    local x2 = resolution-1
    local y1 = 0
    local y2 = resolution-1
    local Rmin = -2.00 -- default is -2.00
    local Rmax = 0.47 -- default is 0.47
    local Dreal = Rmax-Rmin
    local pixelSize = Dreal/resolution
    local Imin = -1.12 -- default is -1.12
    local Imax = 1.12 -- default is 1.12
    local NMAX = 10

    complex = {}
    complex.__index = complex
    
    function complex.new(r, i) return setmetatable({r=r or 0, i=i or 0}, complex) end
    function complex:__add(rhs) return complex.new(self.r + rhs.r, self.i + rhs.i) end
    function complex:__mul(rhs)
        return complex.new(
            self.r*rhs.r-self.i*rhs.i, 
            self.r*rhs.i+self.i*rhs.r
        )
    end
    function complex:sqrThenAddInPlace(rhs)
        local rl = self.r
        self.r = (self.r*self.r-self.i*self.i)+rhs.r
        self.i = (rl*self.i+self.i*rl)+rhs.i
        return
    end
    function complex:abs() return math.sqrt(self.r^2 + self.i^2) end
    function complex:__tostring()
        if self.i >= 0 then
            return string.format("%g+%gi", self.r, self.i)
        else
            return string.format("%g%gi", self.r, self.i)
        end
    end
    
    return coroutine.wrap(function()
        for y = y1, y2 do
            for x = x1, x2 do
                local C = complex.new(Rmin+(x*pixelSize),Imax-(y*pixelSize))
                local z = complex.new(0, 0)
                
                local n=0
                while n<NMAX do
                    n=n+1
                    if cpuAverage() > maxCPU then coroutine.yield() end
                    if z:abs() > 2 then break end
                    z:sqrThenAddInPlace(C)
                end
                -- Bernstein polynomials for coloring
                local t = n/NMAX
                local r = 9*(1-t)*t^3*255
                local g = 15*(1-t)^2*t^2*255
                local b = 8.5*(1-t)^3*t*255
                render.setRGBA(r, g, b)
                render.drawRectFast(x, y, 1, 1)
            end
        end
        
        return true
    end)
end

render.createRenderTarget("computeBuffer")
hook.add("RenderOffscreen", "drawRoutines", function()
    if cpuAverage() > maxCPU or #drawRoutines == 0 then return end
    render.selectRenderTarget("computeBuffer")
    if drawRoutines[#drawRoutines]() then
        table.remove(drawRoutines)
    end
end)

hook.add("Render", "drawComputeBuffer", function()
    render.setRenderTargetTexture("computeBuffer")
    render.drawTexturedRect(0, 0, 512 / resolution * 1024, 512 / resolution * 1024)
end)

table.insert(drawRoutines, drawRoutine())