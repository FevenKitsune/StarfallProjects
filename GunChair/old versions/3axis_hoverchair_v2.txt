--@name 3axis HoverChair 2
--@author FevenKitsune
--@server

-- USAGE:
-- Place chip on the ground, a chair will spawn, sit in it and press W or S to move the hologram

-- Create a frozen SENT `Seat_Jeep` 20 units above the chip
local chair = prop.createSent(chip():getPos() + chip():getUp() * 20, Angle(), "Seat_Jeep", true)

-- Player that's currently sitting in the chair
local driver
-- Due to the fact that `PlayerEnteredVehicle` has a `role` parameter, but `PlayerLeaveVehicle` doesn't we can easily distinguish between the 2 hooks.
-- If a `role` argument is present, set the `driver` variable to the provided player, otherwise set it to `role` (which will be `nil`)
local function set_driver(ply, vehicle, role)
    if vehicle ~= chair then
        return
    end -- If the vehicle in question isn't our chair, exit without doing anything
    driver = role and ply -- If role is "Truthy" (any number value is, even `0`) then store `ply` in our `driver` variable
end
-- Attach the `set_driver` function to the appropriate hooks
hook.add("PlayerEnteredVehicle", "SetDriver", set_driver)
hook.add("PlayerLeaveVehicle", "SetDriver", set_driver)


-- Variables responsible for the movement of the hologram
local velocityY = 0
local accelerationY = 0
local velocityX = 0
local accelerationX = 0
local velocityZ = 0
local accelerationZ = 0

-- Map of inputs and their acceleration values / forces
local inputsY = {
    [IN_KEY.FORWARD] = 3,
    [IN_KEY.BACK] = -3
}

local inputsX = {
    [IN_KEY.MOVELEFT] = -3,
    [IN_KEY.MOVERIGHT] = 3
}

local inputsZ = {
    [IN_KEY.SPEED] = -3,
    [IN_KEY.JUMP] = 3
}

-- Attach a callback to the `KeyPress` hook so we can detect when players press their binds
hook.add("KeyPress", "KeyPress", function(ply, key)
    if ply ~= driver then
        return
    end -- If the player isn't our driver then we don't care
    
    if inputsY[key] then -- If the key is present in our input map...
        accelerationY = inputsY[key] -- then set acceleration to that value
       end
    
    if inputsX[key] then
        accelerationX = inputsX[key]
    end
    
    if inputsZ[key] then
        accelerationZ = inputsZ[key]
    end
end)

-- Attach a callback to the `KeyRelease` hook so we can detect when players release their binds
hook.add("KeyRelease", "KeyRelease", function(ply, key)
    if ply ~= driver then
        return
    end -- If the player isn't our driver then we don't care 
    
    if inputsY[key] then -- Check if the key is one of allowed ones from the input map
        -- Without this snippet, when player decides to press W and S at once, then release only one of them, the hologram will stop
        -- This will simply check whether any other keys from our input map are pressed, if so, set the `acceleration` to the first found one:
        for input_key, force in pairs(inputsY) do
            if ply:keyDown(input_key) then
                accelerationY = force
                return -- Return from the whole function so that `acceleration = 0` doesn't get executed
            end
        end
        
        accelerationY = 0
    end
    
        
    if inputsX[key] then -- Check if the key is one of allowed ones from the input map
        -- Without this snippet, when player decides to press W and S at once, then release only one of them, the hologram will stop
        -- This will simply check whether any other keys from our input map are pressed, if so, set the `acceleration` to the first found one:
        for input_key, force in pairs(inputsX) do
            if ply:keyDown(input_key) then
                accelerationX = force
                return -- Return from the whole function so that `acceleration = 0` doesn't get executed
            end
        end
        
        accelerationX = 0 
    end
        
    
    if inputsZ[key] then -- Check if the key is one of allowed ones from the input map
        -- Without this snippet, when player decides to press W and S at once, then release only one of them, the hologram will stop
        -- This will simply check whether any other keys from our input map are pressed, if so, set the `acceleration` to the first found one:
        for input_key, force in pairs(inputsZ) do
            if ply:keyDown(input_key) then
                accelerationZ = force
                return -- Return from the whole function so that `acceleration = 0` doesn't get executed
            end
        end
        
        accelerationZ = 0
    end    
end)

-- Attach a callback responsible for the movement of the hologram to the `Tick` event
hook.add("Tick", "Update", function()
    -- Add acceleration from user input to the velocity
    velocityY = velocityY + accelerationY
    velocityX = velocityX + accelerationX
    velocityZ = velocityZ + accelerationZ
    -- Create a new vector with Y axis based on the `velocity` and apply that to the hologram
    chair:setVelocity(chair:getPos() + Vector(velocityX, velocityY, velocityZ))
    -- Decrease the velocity, otherwise hologram will never stop
    velocityY = velocityY * 0.9
    velocityX = velocityX * 0.9
    velocityZ = velocityZ * 0.9
end)