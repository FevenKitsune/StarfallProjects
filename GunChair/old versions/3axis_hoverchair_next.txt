--@name 3-axis HoverChair Next
--@author FevenKitsune
--@server

-- USAGE:
-- Place chip on control plate.

-- IN_KEY output ports for modular usage.
wire.adjustOutputs({
    "ALT1",
    "ALT2",
    "ATTACK",
    "ATTACK2",
    "BACK",
    "DUCK",
    "FORWARD",
    "JUMP",
    "LEFT",
    "MOVELEFT",
    "MOVERIGHT",
    "RELOAD",
    "RIGHT",
    "SCORE",
    "SPEED",
    "USE",
    "WALK",
    "ZOOM",
    "GRENADE1",
    "GRENADE2",
    "WEAPON1",
    "WEAPON2",
    "BULLRUSH",
    "CANCEL",
    "RUN",
    "DEBUGSTR1",
    "DEBUGSTR2",
    "DEBUGSTR3",
    "DEBUGPIN1",
    "DEBUGPIN2",
    "DEBUGPIN3",
    "DEBUGPIN4",
    "DEBUGPIN5",
    "DEBUGPIN6",
    "DEBUGPIN7",
    "DEBUGPIN8",
    "DEBUGPIN9",
    }, {
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "string",
    "string",
    "string",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number",
    "number"
    })


wire.ports.DEBUGSTR1 = "Debug test!"
wire.ports.DEBUGSTR2 = "By Feven Kitsune"
wire.ports.DEBUGSTR3 = "Flight Computer Debug System"

local chair

-- SRC: https://github.com/thegrb93/StarfallEx/blob/master/lua/starfall/examples/basic_wire_entity_connection.lua
-- An initialization function that will be executed when the entity changes (and is valid)
local function init(ent)
    chair = ent
    print("Connected to: ", ent)
end

wire.adjustPorts { ["CHAIR"] = "entity" }

hook.add("Input", "HandleEntityInput", function(name, value)
    -- In this example `name` will always be `Ent`, since there's only one input so I don't bother checking it
    if value:isValid() then
        -- When I'm sure everything is OK with the provided entity, I can call my initialization function
        init(value)
    end
end)

--local chair = prop.createSent(chip():getPos() + chip():getUp() * 20, Angle(), "Seat_Jeep", true)
local plate = chip():isWeldedTo()
-- Player that's currently sitting in the chair
local driver
-- Due to the fact that `PlayerEnteredVehicle` has a `role` parameter, but `PlayerLeaveVehicle` doesn't we can easily distinguish between the 2 hooks.
-- If a `role` argument is present, set the `driver` variable to the provided player, otherwise set it to `role` (which will be `nil`)
local function set_driver(ply, vehicle, role)
    if vehicle ~= chair then
        return
    end -- If the vehicle in question isn't our chair, exit without doing anything
    driver = role and ply -- If role is "Truthy" (any number value is, even `0`) then store `ply` in our `driver` variable
end
-- Attach the `set_driver` function to the appropriate hooks
hook.add("PlayerEnteredVehicle", "SetDriver", set_driver)
hook.add("PlayerLeaveVehicle", "SetDriver", set_driver)


-- Variables responsible for the movement of the hologram
local velocityY = 0
local accelerationY = 0
local velocityX = 0
local accelerationX = 0
local velocityZ = 0
local accelerationZ = 0

-- Map of inputs and their acceleration values / forces
local inputsX = {
    [IN_KEY.FORWARD] = -1,
    [IN_KEY.BACK] = 1
}

local inputsY = {
    [IN_KEY.MOVELEFT] = -1,
    [IN_KEY.MOVERIGHT] = 1
}

local inputsZ = {
    [IN_KEY.SPEED] = -1,
    [IN_KEY.JUMP] = 1
}

-- Attach a callback to the `KeyPress` hook so we can detect when players press their binds
hook.add("KeyPress", "KeyPress", function(ply, key)
    if ply ~= driver then
        return
    end -- If the player isn't our driver then we don't care
    
    if inputsY[key] then -- If the key is present in our input map...
        accelerationY = inputsY[key] -- then set acceleration to that value
       end
    
    if inputsX[key] then
        accelerationX = inputsX[key]
    end
    
    if inputsZ[key] then
        accelerationZ = inputsZ[key]
    end
    
    if  key == IN_KEY.ALT1 then wire.ports.ALT1 = 1
    elseif key == IN_KEY.ALT2 then wire.ports.ALT2 = 1
    elseif key == IN_KEY.ATTACK then wire.ports.ATTACK = 1
    elseif key == IN_KEY.ATTACK2 then wire.ports.ATTACK2 = 1
    elseif key == IN_KEY.BACK then wire.ports.BACK = 1
    elseif key == IN_KEY.DUCK then wire.ports.DUCK = 1
    elseif key == IN_KEY.FORWARD then wire.ports.FORWARD = 1
    elseif key == IN_KEY.JUMP then wire.ports.JUMP = 1
    elseif key == IN_KEY.LEFT then wire.ports.LEFT = 1
    elseif key == IN_KEY.MOVELEFT then wire.ports.MOVELEFT = 1
    elseif key == IN_KEY.MOVERIGHT then wire.ports.MOVERIGHT = 1
    elseif key == IN_KEY.RELOAD then wire.ports.RELOAD = 1
    elseif key == IN_KEY.RIGHT then wire.ports.RIGHT = 1
    elseif key == IN_KEY.SCORE then wire.ports.SCORE = 1
    elseif key == IN_KEY.SPEED then wire.ports.SPEED = 1
    elseif key == IN_KEY.USE then wire.ports.USE = 1
    elseif key == IN_KEY.WALK then wire.ports.WALK = 1
    elseif key == IN_KEY.ZOOM then wire.ports.ZOOM = 1
    elseif key == IN_KEY.GRENADE1 then wire.ports.GRENADE1 = 1
    elseif key == IN_KEY.GRENADE2 then wire.ports.GRENADE2 = 1
    elseif key == IN_KEY.WEAPON1 then wire.ports.WEAPON1 = 1
    elseif key == IN_KEY.WEAPON2 then wire.ports.WEAPON2 = 1
    elseif key == IN_KEY.BULLRUSH then wire.ports.BULLRUSH = 1
    elseif key == IN_KEY.CANCEL then wire.ports.CANCEL = 1
    elseif key == IN_KEY.RUN then wire.ports.RUN = 1
    end
end)

-- Attach a callback to the `KeyRelease` hook so we can detect when players release their binds
hook.add("KeyRelease", "KeyRelease", function(ply, key)
    if ply ~= driver then
        return
    end -- If the player isn't our driver then we don't care 
    
    if  key == IN_KEY.ALT1 then wire.ports.ALT1 = 0
    elseif key == IN_KEY.ALT2 then wire.ports.ALT2 = 0
    elseif key == IN_KEY.ATTACK then wire.ports.ATTACK = 0
    elseif key == IN_KEY.ATTACK2 then wire.ports.ATTACK2 = 0
    elseif key == IN_KEY.BACK then wire.ports.BACK = 0
    elseif key == IN_KEY.DUCK then wire.ports.DUCK = 0
    elseif key == IN_KEY.FORWARD then wire.ports.FORWARD = 0
    elseif key == IN_KEY.JUMP then wire.ports.JUMP = 0
    elseif key == IN_KEY.LEFT then wire.ports.LEFT = 0
    elseif key == IN_KEY.MOVELEFT then wire.ports.MOVELEFT = 0
    elseif key == IN_KEY.MOVERIGHT then wire.ports.MOVERIGHT = 0
    elseif key == IN_KEY.RELOAD then wire.ports.RELOAD = 0
    elseif key == IN_KEY.RIGHT then wire.ports.RIGHT = 0
    elseif key == IN_KEY.SCORE then wire.ports.SCORE = 0
    elseif key == IN_KEY.SPEED then wire.ports.SPEED = 0
    elseif key == IN_KEY.USE then wire.ports.USE = 0
    elseif key == IN_KEY.WALK then wire.ports.WALK = 0
    elseif key == IN_KEY.ZOOM then wire.ports.ZOOM = 0
    elseif key == IN_KEY.GRENADE1 then wire.ports.GRENADE1 = 0
    elseif key == IN_KEY.GRENADE2 then wire.ports.GRENADE2 = 0
    elseif key == IN_KEY.WEAPON1 then wire.ports.WEAPON1 = 0
    elseif key == IN_KEY.WEAPON2 then wire.ports.WEAPON2 = 0
    elseif key == IN_KEY.BULLRUSH then wire.ports.BULLRUSH = 0
    elseif key == IN_KEY.CANCEL then wire.ports.CANCEL =0
    elseif key == IN_KEY.RUN then wire.ports.RUN = 0
    end
    
    if inputsY[key] then -- Check if the key is one of allowed ones from the input map
        -- Without this snippet, when player decides to press W and S at once, then release only one of them, the hologram will stop
        -- This will simply check whether any other keys from our input map are pressed, if so, set the `acceleration` to the first found one:
        for input_key, force in pairs(inputsY) do
            if ply:keyDown(input_key) then
                accelerationY = force
                return -- Return from the whole function so that `acceleration = 0` doesn't get executed
            end
        end
        
        accelerationY = 0
    end
    
        
    if inputsX[key] then -- Check if the key is one of allowed ones from the input map
        -- Without this snippet, when player decides to press W and S at once, then release only one of them, the hologram will stop
        -- This will simply check whether any other keys from our input map are pressed, if so, set the `acceleration` to the first found one:
        for input_key, force in pairs(inputsX) do
            if ply:keyDown(input_key) then
                accelerationX = force
                return -- Return from the whole function so that `acceleration = 0` doesn't get executed
            end
        end
        
        accelerationX = 0 
    end
        
    
    if inputsZ[key] then -- Check if the key is one of allowed ones from the input map
        -- Without this snippet, when player decides to press W and S at once, then release only one of them, the hologram will stop
        -- This will simply check whether any other keys from our input map are pressed, if so, set the `acceleration` to the first found one:
        for input_key, force in pairs(inputsZ) do
            if ply:keyDown(input_key) then
                accelerationZ = force
                return -- Return from the whole function so that `acceleration = 0` doesn't get executed
            end
        end
        
        accelerationZ = 0
    end
    
    
end)

-- Attach a callback responsible for the movement of the hologram to the `Tick` event
hook.add("Tick", "Update", function()
    
    
    
    if (driver == nil) then
        wire.ports.ALT1 = 0
        wire.ports.ALT2 = 0
        wire.ports.ATTACK = 0
        wire.ports.ATTACK2 = 0
        wire.ports.BACK = 0
        wire.ports.DUCK = 0
        wire.ports.FORWARD = 0
        wire.ports.JUMP = 0
        wire.ports.LEFT = 0
        wire.ports.MOVELEFT = 0
        wire.ports.MOVERIGHT = 0
        wire.ports.RELOAD = 0
        wire.ports.RIGHT = 0
        wire.ports.SCORE = 0
        wire.ports.SPEED = 0
        wire.ports.USE = 0
        wire.ports.WALK = 0
        wire.ports.ZOOM = 0
        wire.ports.GRENADE1 = 0
        wire.ports.GRENADE2 = 0
        wire.ports.WEAPON1 = 0
        wire.ports.WEAPON2 = 0
        wire.ports.BULLRUSH = 0
        wire.ports.CANCEL =0
        wire.ports.RUN = 0
        return
    end
    
    -- Add acceleration from user input to the velocity
    velocityY = velocityY + accelerationY
    velocityX = velocityX + accelerationX
    velocityZ = velocityZ + accelerationZ
    
    --[[
    RELATIVE EYE ANGLE NOTES
    tostring(chair:worldToLocalAngles(driver:getEyeAngles())
    
                    90d

        180d/-180d   +   0d/0d

                   -90d
    
    ]]--
    
    
    local relativeEyeAngles = (chair:worldToLocalAngles(driver:getEyeAngles()):rotateAroundAxis(Vector(0,0,1),-90))
    local transformedEyeAngles = Angle(relativeEyeAngles[1], relativeEyeAngles[2], relativeEyeAngles[3])
    local scaledEyeAngles = (transformedEyeAngles / Angle(30, 20, 20)) * Angle(-1, 1, 1)
    
    --print(driver:getEyeAngles())
    -- Create a new vector with Y axis based on the `velocity` and apply that to the hologram
    wire.ports.DEBUGSTR1 = "plate:getAngles()\n" .. tostring(plate:getAngles())
    wire.ports.DEBUGSTR2 = "relativeEyeAngles\n" .. tostring(relativeEyeAngles)
    wire.ports.DEBUGSTR3 = "scaledEyeAngles\n" .. tostring(scaledEyeAngles)
    
    --print(transformedEyeAngles)
    plate:setPos(plate:getPos() + plate:localToWorldVector(Vector(velocityX, velocityY, velocityZ)))
    plate:setAngles(plate:getAngles() + scaledEyeAngles)
    -- Decrease the velocity, otherwise hologram will never stop
    velocityY = velocityY * 0.9
    velocityX = velocityX * 0.9
    velocityZ = velocityZ * 0.9
end)