--@name DVD Logo
--@author Feven Kitsune
--@client

--[[ note post writing: I think objects have significant overhead. rewrite using an optimized array structure such as:
table {
    x= {0, 1, 2...}
    y= {0, 1, 2...}
    dir= {0, 1, 2...}
}

which can be accessed via table.x[i].
https://www.lua.org/gems/sample.pdf
]]--
local IdleBounce = class("IdleBounce")
local rx, ry = render.getResolution()

function IdleBounce:initialize(x, y, dir, clr, speed, sx, sy)
    --[[
    directions:
      0 1
       X
      3 2
    ]]--
    
    self.x = x or 0
    self.y = y or 0
    self.dir = dir or 0
    self.speed = speed or 1
    self.sx = sx or 4
    self.sy = sy or 4
    self.color = clr or Color(255, 255, 255)
end

function IdleBounce:think()
    self:draw()
    
    if (self.dir == -1) then
        -- do nothing
    elseif (self.dir == 0) then
        self.x = self.x - self.speed
        self.y = self.y - self.speed
    elseif (self.dir == 1) then
        self.x = self.x + self.speed
        self.y = self.y - self.speed
    elseif (self.dir == 2) then
        self.x = self.x + self.speed
        self.y = self.y + self.speed
    elseif (self.dir == 3) then
        self.x = self.x - self.speed
        self.y = self.y + self.speed
    else
        error("Invalid dir state!")
    end
    
    -- left bounce
    -- NOTE: rectangle is drawn from top left corner
    if (self.x < 0) then
        if (self.dir == 0) then self.dir = 1
        elseif (self.dir == 3) then self.dir = 2
        end
    elseif (self.x + self.sx > rx) then -- right bounce
        if (self.dir == 1) then self.dir = 0
        elseif (self.dir == 2) then self.dir = 3
        end
    end
    
    -- top bounce
    if (self.y < 0) then
        if (self.dir == 0) then self.dir = 3
        elseif (self.dir == 1) then self.dir = 2
        end
    elseif (self.y + self.sy > ry) then -- bottom bounce
        if (self.dir == 2) then self.dir = 1
        elseif (self.dir == 3) then self.dir = 0
        end
    end
end

function IdleBounce:draw()
    render.setColor(self.color)
    render.drawRect(self.x, self.y, self.sx, self.sy)
end

render.createRenderTarget("Background")

local game = {}
game.particles = {}

for i=0,1300,1 do
    --local np = IdleBounce:new((i)+10,math.sin(i/10)*50+(i/2+10),i%4)
    local np = IdleBounce:new(math.random(0,rx),math.random(0,ry),math.random(0,3))
    table.insert(game.particles, np)
end

-- Render hook
hook.add("render", "", function ()
    rx, ry = render.getResolution()
    for k,v in pairs(game.particles) do
        v:think()
    end
end)