--@name Strange Mesh Terrain
--@author Feven Kitsune
--@shared

-- configuration
local DEBUG = true
local UINT32_MAX = 4294967295

local HeightMap = class("HeightMap")
    
function HeightMap:initialize(size, scale, seedA, seedB, seedC)
    self.heightData = {}
    self.size = size
    self.scale = scale
    self.seedA = seedA
    self.seedB = seedB
    self.seedC = seedC
end

function HeightMap:generate()
    function randomGradient(ix, iy)
        -- No precomputed gradients mean this works for any number of grid coordinates
        local w = 8 * 64 -- Assuming Lua uses 32-bit integers
        local s = w / 2 -- rotation width
        local a = ix
        local b = iy
        
        a = a * self.seedA
        b = bit.bxor(b, bit.bor(bit.lshift(a, s), bit.rshift(a, w - s)))
        b = b * self.seedB
        a = bit.bxor(a, bit.bor(bit.lshift(b, s), bit.rshift(b, w - s)))
        a = a * self.seedC
        
        local random = a * (3.14159265 / bit.bnot(bit.rshift(bit.bnot(0), 1))) -- in [0, 2*Pi]
        local v = { math.cos(random), math.sin(random) }
        
        return v
    end
    
    local function dotGridGradient(ix, iy, x, y)
        local gradient = randomGradient(ix, iy)
        
        local dx = x - ix
        local dy = y - iy
        
        return dx*gradient[1]+dy*gradient[2]
    end
    
    local function perlin(x, y)
        -- Determine grid cell coordinates
        local x0 = math.floor(x)
        local x1 = x0+1
        local y0 = math.floor(y)
        local y1 = y0+1
        
        -- Determine interpolation weights
        -- Could also use higher order polynomial/s-curve here
        local sx = x-x0
        local sy = y-y0
        
        -- Interpolate between grid point gradients
        local n0 = dotGridGradient(x0, y0, x, y)
        local n1 = dotGridGradient(x1, y0, x, y)
        local ix0 = math.lerp(sx, n0, n1)
        
        n0 = dotGridGradient(x0, y1, x, y)
        n1 = dotGridGradient(x1, y1, x, y)
        ix1 = math.lerp(sx, n0, n1)
    
        local value = math.lerp(sy, ix0, ix1)
        return value
    end
    
    for x = 0, self.size do
        self.heightData[x] = {}
        for y = 0, self.size do
            self.heightData[x][y] = perlin(x/self.scale, y/self.scale)
        end
    end
end

function HeightMap:getHeightData()
    return self.heightData
end

-- default values
local size = 3
local scale = 10

if SERVER then
    -- SERVER CODE
    local seedA = math.random(1000000000, UINT32_MAX)
    local seedB = math.random(1000000000, UINT32_MAX)
    local seedC = math.random(1000000000, UINT32_MAX)
    
    if DEBUG then
        printConsole("Server has generated seed values:")
        printConsole("Seed A: " .. tostring(seedA))
        printConsole("Seed B: " .. tostring(seedB))
        printConsole("Seed C: " .. tostring(seedC))
    end
    
    local map = HeightMap:new(size, scale, seedA, seedB, seedC)
    if DEBUG then printConsole("Computing gradient...") end
    map:generate()
    local mapData = map:getHeightData()
    if DEBUG then printConsole(table.toString(mapData,nil,true)) end
    
    net.receive("clientReadyRequestSeedValues", function(len, ply)
        -- Client has finished loading and is ready to recieve system seed values.
        if DEBUG then printConsole("Client " .. ply:getName() .. " is ready. Sending seed values.") end
        net.start("sendSeedValues")
        net.writeUInt(seedA, 32)
        net.writeUInt(seedB, 32)
        net.writeUInt(seedC, 32)
        net.send(ply)
    end)
    
else
    -- CLIENT CODE
    local map
    
    local function generateClientHeightMap(seedA, seedB, seedC)
        map = HeightMap:new(size, scale, seedA, seedB, seedC)
        if DEBUG then printConsole("Computing gradient...") end
        map:generate()
        local mapData = map:getHeightData()
        if DEBUG then printConsole(table.toString(mapData,nil,true)) end
    end
    
    net.receive("sendSeedValues", function(len, ply)
        -- Server has responded to request for seed values. Store these locally on the client.
        local seedA = net.readUInt(32)
        local seedB = net.readUInt(32)
        local seedC = net.readUInt(32)
        if DEBUG then
            printConsole("Client has recieved seed values:")
            printConsole("Seed A: " .. tostring(seedA))
            printConsole("Seed B: " .. tostring(seedB))
            printConsole("Seed C: " .. tostring(seedC))
            printConsole("Generating height map...")
        end
        generateClientHeightMap(seedA, seedB, seedC)
    end)
    
    net.start("clientReadyRequestSeedValues")
    net.send()
end