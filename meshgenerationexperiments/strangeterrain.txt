--@name Strange Terrain
--@author Feven Kitsune
--@server

local heightMap = {}
local gridSize = 30
local scale = 200

local seedA = math.random(1000000000, 9999999999)
local seedB = math.random(1000000000, 9999999999)
local seedC = math.random(1000000000, 9999999999)

function randomGradient(ix, iy)
    -- No precomputed gradients mean this works for any number of grid coordinates
    local w = 8 * 64 -- Assuming Lua uses 32-bit integers
    local s = w / 2 -- rotation width
    local a = ix
    local b = iy
    
    a = a * seedA
    b = bit.bxor(b, bit.bor(bit.lshift(a, s), bit.rshift(a, w - s)))
    b = b * seedB
    a = bit.bxor(a, bit.bor(bit.lshift(b, s), bit.rshift(b, w - s)))
    a = a * seedC
    
    local random = a * (3.14159265 / bit.bnot(bit.rshift(bit.bnot(0), 1))) -- in [0, 2*Pi]
    local v = Vector2( math.cos(random), math.sin(random) )
    
    return v
end

local function dotGridGradient(ix, iy, x, y)
    local gradient = randomGradient(ix, iy)
    
    local dx = x - ix
    local dy = y - iy
    
    return dx*gradient[1]+dy*gradient[2]
end

local function perlin(x, y)
    -- Determine grid cell coordinates
    local x0 = math.floor(x)
    local x1 = x0 + 1
    local y0 = math.floor(y)
    local y1 = y0 + 1
    
    -- Determine interpolation weights
    -- Could also use higher order polynomial/s-curve here
    local sx = x - x0
    local sy = y - y0
    
    -- Interpolate between grid point gradients
    local n0 = dotGridGradient(x0, y0, x, y)
    local n1 = dotGridGradient(x1, y0, x, y)
    local ix0 = math.lerp(sx, n0, n1)
    
    n0 = dotGridGradient(x0, y1, x, y)
    n1 = dotGridGradient(x1, y1, x, y)
    ix1 = math.lerp(sx, n0, n1)

    local value = math.lerp(sy, ix0, ix1)
    return value
end

-- Generate heightmap
for x = 0, gridSize do
    heightMap[x] = {}
    for y = 0, gridSize do
        heightMap[x][y] = 500 + 1000 * perlin(x/5, y/5)
    end
end

local spawnChunks = coroutine.wrap(function()
    for x = 0, gridSize-1 do
        local chunk = {}
        for y = 0, gridSize-1 do
            if not prop.canSpawn() then
                coroutine.yield()
            end
            
            local chunkY = y % 10
            
            local chunkData = {}
            chunkData = {
                Vector(0, chunkY * scale, 0),
                Vector(scale, chunkY * scale, 0),
                Vector(scale, chunkY * scale, heightMap[x+1][y]),
                Vector(0, chunkY * scale, heightMap[x][y]),
                Vector(0, (chunkY + 1) * scale, 0),
                Vector(scale, (chunkY + 1) * scale, 0),
                Vector(scale, (chunkY + 1) * scale, heightMap[x+1][y+1]),
                Vector(0, (chunkY + 1) * scale, heightMap[x][y+1])
            }

            table.insert(chunk, chunkData)
            
            if #chunk >= 10 then
                local root = chunk[1].position
                prop.createCustom(chip():getPos() + Vector2(x, y) * scale, Angle(0, 0, 0), chunk, true)
                chunk = {}
            end
        end
        
    end
    
    return true
end)

hook.add("tick", "spawnChunks", function()
    if prop.canSpawn() and spawnChunks() then
        hook.remove("tick", "spawnChunks")
    end
end)