--@name Strange Mesh
--@author Feven Kitsune
--@shared

if SERVER then
    local hud = prop.createComponent(chip():getPos() + Vector(0,0,1), Angle(), "starfall_hud", "models/bull/dynamicbutton.mdl", true)
    hud:linkComponent(chip())
    constraint.weld(hud, chip()) 
end
if CLIENT then
    local mtx = Matrix()
    mtx:setTranslation(chip():getPos())
    
    local terrainMesh = mesh.createEmpty()
    
    local heightMap = {}
    local gridSize = 50
    local scale = 10
    local amplitude = 25
    local zoom = 5
    
    local seedA = math.random(1000000000, 9999999999)
    local seedB = math.random(1000000000, 9999999999)
    local seedC = math.random(1000000000, 9999999999)
    
    function randomGradient(ix, iy)
        -- No precomputed gradients mean this works for any number of grid coordinates
        local w = 8 * 64 -- Assuming Lua uses 32-bit integers
        local s = w / 2 -- rotation width
        local a = ix
        local b = iy
        
        a = a * seedA
        b = bit.bxor(b, bit.bor(bit.lshift(a, s), bit.rshift(a, w - s)))
        b = b * seedB
        a = bit.bxor(a, bit.bor(bit.lshift(b, s), bit.rshift(b, w - s)))
        a = a * seedC
        
        local random = a * (3.14159265 / bit.bnot(bit.rshift(bit.bnot(0), 1))) -- in [0, 2*Pi]
        local v = { math.cos(random), math.sin(random) }
        
        return v
    end
    
    local function dotGridGradient(ix, iy, x, y)
        local gradient = randomGradient(ix, iy)
        
        local dx = x - ix
        local dy = y - iy
        
        return dx*gradient[1]+dy*gradient[2]
    end
    
    local function perlin(x, y)
        -- Determine grid cell coordinates
        local x0 = math.floor(x)
        local x1 = x0 + 1
        local y0 = math.floor(y)
        local y1 = y0 + 1
        
        -- Determine interpolation weights
        -- Could also use higher order polynomial/s-curve here
        local sx = x - x0
        local sy = y - y0
        
        -- Interpolate between grid point gradients
        local n0 = dotGridGradient(x0, y0, x, y)
        local n1 = dotGridGradient(x1, y0, x, y)
        local ix0 = math.lerp(sx, n0, n1)
        
        n0 = dotGridGradient(x0, y1, x, y)
        n1 = dotGridGradient(x1, y1, x, y)
        ix1 = math.lerp(sx, n0, n1)
    
        local value = math.lerp(sy, ix0, ix1)
        return value
    end
    
    -- Generate heightmap
    for x = 0, gridSize do
        heightMap[x] = {}
        for y = 0, gridSize do
            heightMap[x][y] = amplitude + amplitude * perlin(x/zoom, y/zoom)
        end
    end
    
    local spawnChunks = coroutine.wrap(function()
        mesh.generate(terrainMesh, MATERIAL.TRIANGLES, gridSize * gridSize * 2, function()
            function math.getPolyNormal(p1, p2, p3)
                local e1 = p1 - p2
                local e2 = p1 - p3
                
                return e2:cross(e1)
            end
            
            local uvSize = 64
            
            function mesh.writePoly(v1, v2, v3)
                local normal = math.getPolyNormal(v1, v2, v3)
            
                mesh.writePosition(v1)
                mesh.writeUV(0, v1.x / uvSize, v1.y / uvSize)
                mesh.writeNormal(normal)
                mesh.writeColor(255, 255, 255, 255)
                mesh.advanceVertex()
            
                mesh.writePosition(v2)
                mesh.writeUV(0, v2.x / uvSize, v2.y / uvSize)
                mesh.writeNormal(normal)
                mesh.writeColor(255, 255, 255, 255)
                mesh.advanceVertex()
            
                mesh.writePosition(v3)
                mesh.writeUV(0, v3.x / uvSize, v3.y / uvSize)
                mesh.writeNormal(normal)
                mesh.writeColor(255, 255, 255, 255)
                mesh.advanceVertex()
            end
            
            for x = 0, gridSize-1 do
                local chunk = {}
                for y = 0, gridSize-1 do
                    mesh.writePoly( Vector(x * scale, y * scale, heightMap[x][y]), 
                                    Vector(x * scale, (y + 1) * scale, heightMap[x][y+1]), 
                                    Vector((x + 1) * scale, y * scale, heightMap[x+1][y]) )
                    mesh.writePoly( Vector((x + 1) * scale, y * scale, heightMap[x+1][y]), 
                                    Vector(x * scale, (y + 1) * scale, heightMap[x][y+1]), 
                                    Vector((x + 1) * scale, (y + 1) * scale, heightMap[x+1][y+1]) )
                end
                
            end
        end)
        
        return true
    end)
    
    hook.add("tick", "spawnChunks", function()
        if spawnChunks() then
            hook.remove("tick", "spawnChunks")
        end
    end)
    
    --local mat = material.create("UnlitGeneric")
    --mat:setTexture("$basetexture", "phoenix_storms/ps_grass")
    
    local mat = material.load("phoenix_storms/ps_grass")
    
    local holo = hologram.create(Vector(), Angle(), "models/error.mdl", Vector())
    holo:setNoDraw(true)
    
    hook.add('postdrawtranslucentrenderables', '', function(_, _, skybox3d)
        if skybox3d then return end
        holo:draw()
        --render.setColorModulation(1, 1, 1)
        --render.setBlend(1)
        render.setMaterial(mat)
        render.pushMatrix(mtx)
        terrainMesh:draw()
    end)
end