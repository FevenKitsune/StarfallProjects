--@name Advanced Web Player
--@author Feven Kitsune (Forked from Redox)
--@model
--@shared
--@model models/props_lab/citizenradio.mdl

local DEBUG = false
local ONOWNER = false
local FADE_START = 350
local FADE_END = 400
local PLAYDIST = 400
local DEFAULT_VOLUME = 2
local DECAY_FACTOR = 0.9
local ATTACK_FACTOR = 0.1

-- Define an empty table to store URLs
local urls = {
}

-- Define an empty library table to store song information
local library = {}

if SERVER then
    wire.adjustPorts(nil, {["FFT1"]="vector", ["FFT2"]="vector", ["FFT3"]="vector", ["FFT4"]="vector", ["FFT5"]="vector"})
    
    -- Server-side code
    hook.add("PlayerSay", "Commands", function(ply, txt)
        if ply ~= owner() then
            return
        end
        
        -- Check if the player wants to play a specific song
        if txt:sub(1, 6) == "!song " then
            -- Send a network message to play the song
            net.start("playSong")
            net.writeString(txt:sub(7))
            net.send()
            return ""
        end
        
        if txt:sub(1, 5) == "!url " then
            -- Send a network message to send URL to play
            net.start("playSongURL")
            net.writeString(txt:sub(6))
            net.send()
            return ""
        end
            
        
        -- Check if the player wants to set the volume
        if txt:sub(1, 8) == "!volume " then
            local vol = tonumber(txt:sub(9))
            
            if vol == nil then
                print("Please specify volume! (1 - 10)")
                return ""
            end
            
            -- Send a network message to set the volume
            net.start("setVolume")
            net.writeInt(vol, 5)
            net.send()
            return ""
        end
        
        -- Check if the player wants to set the volume (short command)
        if txt:sub(1, 5) == "!vol " then
            local vol = tonumber(txt:sub(6))
            
            if vol == nil then
                print("Please specify volume! (1 - 10)")
                return ""
            end
            
            -- Send a network message to set the volume
            net.start("setVolume")
            net.writeInt(vol, 5)
            net.send()
            return ""
        end
        
        -- Check if the player wants to pause the song
        if txt:sub(1, 6) == "!pause" or txt:sub(1, 3) == "!pa" then
            -- Send a network message to pause the song
            net.start("pause")
            net.send()
            return ""
        end
        
        -- Check if the player wants to play the song
        if txt:sub(1, 5) == "!play" or txt:sub(1, 3) == "!pl" then
            -- Send a network message to play the song
            net.start("play")
            net.send()
            return ""
        end
        
        -- Check if the player wants to stop the song
        if txt:sub(1, 5) == "!stop" or txt:sub(1, 3) == "!st" then
            -- Send a network message to stop the song
            net.start("stop")
            net.send()
            return ""
        end
        
        if txt:sub(1, 8) == "!library" then
            net.start("library")
            net.send()
            return""
        end
    end)
    
    --[[
    net.receive("FFTPacket", function(len)
        local fft_data = net.readTable()
        local cFFT1 = Color(0, 1, (fft_data[1] or 0)*5):hsvToRGB()
        local cFFT2 = Color(72, 1, (fft_data[2] or 0)*5):hsvToRGB()
        local cFFT3 = Color(144, 1, (fft_data[3] or 0)*5):hsvToRGB()
        local cFFT4 = Color(216, 1, (fft_data[4] or 0)*5):hsvToRGB()
        local cFFT5 = Color(288, 1, (fft_data[5] or 0)*5):hsvToRGB()   
        wire.ports.FFT1 = Vector(cFFT1[1], cFFT1[2], cFFT1[3])
        wire.ports.FFT2 = Vector(cFFT2[1], cFFT2[2], cFFT2[3])
        wire.ports.FFT3 = Vector(cFFT3[1], cFFT3[2], cFFT3[3])
        wire.ports.FFT4 = Vector(cFFT4[1], cFFT4[2], cFFT4[3])
        wire.ports.FFT5 = Vector(cFFT5[1], cFFT5[2], cFFT5[3])
    end)]]--
else
    -- Client-side code
    local snd
    local volume = DEFAULT_VOLUME
    local currentName = ""
    local currentArtist = ""
    local fft_new = {}
    local fft_previous = {}
    local fft_smooth = {}
    
    -- Function to trim leading and trailing spaces from a string
    function trim_string(str)
        local start_index = 1
        local end_index = #str

        -- Find the index of the first non-space character from the beginning
        while start_index <= #str and str:sub(start_index, start_index) == " " do
            start_index = start_index + 1
        end

        -- Find the index of the first non-space character from the end
        while end_index > 0 and str:sub(end_index, end_index) == " " do
            end_index = end_index - 1
        end

        -- Return the trimmed substring
        return str:sub(start_index, end_index)
    end

    -- Function to decode URL-encoded characters in a string
    function url_decode(input_string)
        local output_string = input_string:gsub("%%(%x%x)", function(hex)
            return string.char(tonumber(hex, 16))
        end)
        return output_string
    end

    -- Function to split a string by dashes and return a table
    function split_string_by_dashes(input_string)
        local split_table = {}
        local track_info = {}

        for value in input_string:gmatch("[^%-]+") do
            table.insert(split_table, trim_string(value))
        end
    
        track_info["track"] = split_table[1]
        track_info["artist"] = split_table[2]
        track_info["name"] = split_table[3]
    
        return track_info
    end

    -- Function to insert a URL into the library table
    function insert_into_library(url)
        -- Remove query parameters from the URL
        local url_without_params = url:gsub("%?.*", "")

        -- Extract the file name from the URL
        local file_name = url_without_params:match("/([^/]+)$")
        local file_name = file_name:gsub(".ogg", "")
        local file_name = url_decode(file_name)
    
        local new_entry = split_string_by_dashes(file_name)
        new_entry["url"] = url
        library[#library + 1] = new_entry
        return new_entry
    end

    -- Iterate over the URLs and insert them into the library
    for idx, value in ipairs(urls) do
        insert_into_library(value)
    end

    -- Print the library table (for testing purposes)
    if DEBUG then printTable(library) end
    
    -- Function to calculate the Levenshtein distance between two strings
    local function levenshteinDistance(str1, str2)
        local len1, len2 = #str1, #str2
        local matrix = {}
    
        for i = 0, len1 do
            matrix[i] = {}
            matrix[i][0] = i
        end

        for j = 0, len2 do
            matrix[0][j] = j
        end

        for i = 1, len1 do
            for j = 1, len2 do
                local cost = (str1:sub(i, i) ~= str2:sub(j, j) and 1 or 0)
                matrix[i][j] = math.min(
                    matrix[i - 1][j] + 1,
                    matrix[i][j - 1] + 1,
                    matrix[i - 1][j - 1] + cost
                )
            end
        end

        return matrix[len1][len2]
    end
    
    -- Function to search for a song by name (fuzzy search)
    local function searchSongByName(songName)
        local minDistance = math.huge
        local foundSong = nil

        for _, song in ipairs(library) do
            if DEBUG then print("Checking song: " .. song.name:lower()) end
            local distance = levenshteinDistance(song.name:lower(), songName:lower())
            if DEBUG then print("Distance: " .. distance) end
            if distance < minDistance then
                if DEBUG then print("Distance is less than minDistance... new found song is " .. song.name) end
                minDistance = distance
                foundSong = song
            end
        end

        -- Adjust the threshold as desired
        --local threshold = 100
        --if minDistance <= threshold then
        --    return foundSong
        --else
        --    return nil  -- Song not found
        --end
        print("Song found... " .. foundSong.name)
        return foundSong -- Just return the best match, no threshold.
    end
    
    -- Function to load and play a song
    local function loadSong(songURL)
        local audioSource
        local foundSong = searchSongByName(songURL)
        
        if foundSong ~= nil then
            audioSource = foundSong.url
            currentName = foundSong.name
            currentArtist = foundSong.artist
        else
            audioSource = songURL
            currentName = "Unknown"
            currentArtist = "Unknown"
        end
        
        -- Correct for default Dropbox share links
        if DEBUG then print("Original source: " .. audioSource) end
        audioSource = audioSource:gsub("?dl=0", "?dl=1")
        audioSource = audioSource:gsub("https://www.dropbox.com/s/", "https://dl.dropboxusercontent.com/s/")
        if DEBUG then print("Fixed source: " .. audioSource) end
        
        -- Load the song using the audio library (bass)
        bass.loadURL(audioSource, "3d noblock noplay", function(bassObj)
            if snd and snd:isValid() then snd:stop() end -- Something is already playing, destroy it before continuing.
            snd = bassObj
            if ONOWNER then
                snd:setPos(owner():getPos())
            else
                snd:setPos(chip():getPos())
            end
            snd:setVolume(volume)
            snd:setLooping(false)
            snd:setFade(FADE_START, FADE_END)
            snd:play()
        end)
    end
    
    local function loadSongURL(songURL)
        -- Load the song using the audio library (bass)
        bass.loadURL(songURL, "3d noblock noplay", function(bassObj)
            if snd and snd:isValid() then snd:stop() end -- Something is already playing, destroy it before continuing.
            snd = bassObj
            if ONOWNER then
                snd:setPos(owner():getPos())
            else
                snd:setPos(chip():getPos())
            end
            snd:setVolume(volume)
            snd:setLooping(false)
            snd:setFade(FADE_START, FADE_END)
            snd:play()
        end)
    end
        
    
    -- Receive the network message to play a song
    net.receive("playSong", function(len)
        local url = net.readString()
        loadSong(url)
    end)
    
    net.receive("playSongURL", function(len)
        local url = net.readString()
        loadSongURL(url)
    end)
    
    -- Receive the network message to set the volume
    net.receive("setVolume", function(len)
        local vol = net.readInt(5)
        volume = vol
        
        -- Update the volume of the currently playing song
        if snd ~= nil and snd:isValid() then
            snd:setVolume(vol)
        end
            
        print("Volume has been set to " .. tostring(vol))
    end)
    
    -- Receive the network message to pause the song
    net.receive("pause", function(len)
        if snd == nil or not snd:isValid() then
            print("Nothing is playing!")
            return
        end
        
        snd:pause()
    end)
    
    -- Receive the network message to play the song
    net.receive("play", function(len)
        if snd == nil or not snd:isValid() then
            print("Nothing is playing!")
            return
        end
        
        snd:play()
    end)
    
    -- Receive the network message to stop the song
    net.receive("stop", function(len)
        if snd == nil or not snd:isValid() then
            print("Nothing is playing!")
            return
        end
        
        snd:stop()
    end)
    
    net.receive("library", function(len)
        for _, song in ipairs(library) do
            local track_name = song.name
            local track_artist = song.artist
            
            print(track_name .. " by " .. track_artist)
        end
    end)
    
    -- Perform actions during the Think hook
    hook.add("Think", "sndCutoff", function()
        if snd == nil or not snd:isValid() then
            return
        end
        
        -- Adjust the volume based on the distance between the player and the owner
        if ONOWNER then
            if player():getPos():getDistance(owner():getPos()) > PLAYDIST then
                snd:setVolume(0)
            else
                snd:setVolume(volume)
            end
        else
            if player():getPos():getDistance(chip():getPos()) > PLAYDIST then
                snd:setVolume(0)
            else
                snd:setVolume(volume)
            end
        end
        
    end)
    
    -- Perform actions during the Think hook
    hook.add("Think", "sndPos", function()
        if snd == nil or not snd:isValid() then
            return
        end
        
        -- Update the position of the song based on the player's position
        snd:setPos(player():getPos())
    end)
    
    hook.add("Think", "calculateFFT", function()
        if snd == nil or not snd:isValid() then
            return
        end
        
        -- Define a local function for smoothing the FFT values with attack and decay factors
        local function fft_smoothing(fft_previous, fft_new, attack_factor, decay_factor)
            local decayed_values = {}
            -- Iterate over each frequency bin of the FFT values
            for i, value in ipairs(fft_new) do
                if value > fft_previous[i] then
                    -- Apply attack factor to smoothly increase the value
                    local decayed_value = fft_previous[i] + ((value - fft_previous[i]) * attack_factor)
                    table.insert(decayed_values, decayed_value)
                else
                    -- Apply decay factor to gradually decrease the value
                    local decayed_value = fft_previous[i] * decay_factor
                    table.insert(decayed_values, decayed_value)
                end
            end
            
            return decayed_values  -- Return the smoothed FFT values
        end
        
        -- Check if the previous FFT values table is empty
        if next(fft_previous) == nil then
            -- If empty, initialize fft_smooth with current FFT values
            fft_smooth = snd:getFFT(3)
        end
        fft_previous = fft_smooth
        fft_new=snd:getFFT(3)
        
        fft_smooth = fft_smoothing(fft_previous, fft_new, ATTACK_FACTOR, DECAY_FACTOR)
        
    end)
    
    local function quotaCheck(n)
        return math.max(quotaAverage(), quotaUsed()) < quotaMax()*n
    end
    
    local function ramCheck(n)
        return math.max(ramAverage(), ramUsed()) < ramMax()*n
    end
    
    hook.add("render","",function()
        if quotaCheck(0.5) && ramCheck(0.5) then
            
            --[[
            if player() == owner() then
                net.start("FFTPacket")
                net.writeTable({fft_smooth[1], fft_smooth[2], fft_smooth[3], fft_smooth[4], fft_smooth[5]})
                net.send(nil, true)
            end]]--
            
            render.setColor(Color(0,1,(fft_smooth[1] or 0)*1):hsvToRGB()) 
            render.draw3DBox(Vector(0,512,0),Angle(),Vector(),Vector(512*2))
                
            render.setColor(Color(0,1,(fft_smooth[2] or 0)*1):hsvToRGB()) 
            render.draw3DBox(Vector(512,512,0),Angle(0,0,90),Vector(),Vector(512))
            render.draw3DBox(Vector(-512,512,0),Angle(0,0,90),Vector(),Vector(512))
                        
            render.setColor(Color(0,1,(fft_smooth[3] or 0)*1):hsvToRGB()) 
            render.draw3DBox(Vector(0,0,0),Angle(0,0,90),Vector(),Vector(512))  
                
            render.setColor(Color(0,1,(fft_smooth[5] or 0)*1):hsvToRGB()) 
            render.draw3DBox(Vector(0,512,512),Angle(0,0,90),Vector(),Vector(512))
                
            for i=0,50,1 do
                render.setColor(Color(i*4,1,1):hsvToRGB())
                render.draw3DBox(Vector(0+i*10,512,250),Angle(),Vector(),Vector(10,-50-(fft_smooth[i+1] or 0)*512,10)) -- default 350
            end
            render.setFont("Trebuchet24")
            render.drawText(4, 0, "Currently playing:\n"..currentName.."\n"..currentArtist)
        end
    end)
end