--@name FOXTEK Laser Rainbow Spinner Cycler
--@author FOXTEK (FevenKitsune)
--@server

local Laser = class("Laser")
function Laser:initialize(R, Theta, Phi, Color)
    self.R = R
    self.Theta = Theta
    self.Phi = Phi
    
    self.xSize = 0.1
    self.ySize = 0.1
    
    self.Line = holograms.create( chip():getPos(), Angle(), "models/holograms/cube.mdl", Vector(1, self.xSize, self.ySize) )
    self.Line:setColor(Color)
    self.CubeSize = self.Line:obbSize()[2]
    self.Line:suppressEngineLighting(true)

    -- https://en.wikipedia.org/wiki/Spherical_coordinate_system
    self.xyz = Vector()
end

function Laser:think(parent)
    local startpos = parent:getPos()
    local endpos = parent:localToWorld(self.xyz)
    
    local rayMidPoint = (startpos + endpos) / 2
    self.Line:setPos( rayMidPoint )
    self.Line:setAngles( (endpos - startpos):getAngle() )
    self.Line:setScale( Vector( (endpos - startpos):getLength() / self.CubeSize, self.xSize, self.ySize ) )
end

function Laser:calculateXYZ()
    local theta = self.Theta + (math.pi / 2) -- Polar points on a spherical system are weird. Rotate.
    local rxsintheta = self.R * math.sin(theta)
    self.xyz[3] = rxsintheta * math.cos(self.Phi) -- This order of coordinates was chosen to compensate for the rotation.
    self.xyz[1] = rxsintheta * math.sin(self.Phi)
    self.xyz[2] = self.R * math.cos(theta)
end

local fp = false
local n = 50
local R = 750

local Lasers = {}
for i = 1, n do
    Lasers[i] = Laser:new(R, 0, 0, Color(i*(360/n), 1.0, 1.0):hsvToRGB())
end

--timer.create("update_laser", 0.03, 0, function()
hook.add("tick", "update_laser", function()
    --fp = not fp -- HALF RATE UPDATES
    --if fp then return end
    
    local rt = timer.realtime
    local sin = math.sin
    local cos = math.cos
    
    local Cn = Lasers[1].Line:getColor()
    Lasers[n].Line:setColor(Cn)
    
    for k = 1, #Lasers do
        local v = Lasers[k]
        --v.Theta = sin( ((rt()*-5) + (1/n) * k ) * 1 )
        v.Theta = ((rt()*2) + (1/(n/(2*math.pi))) * (k) ) % (2 * math.pi)
        v.Phi = cos( ((rt()*2) + (1/(n/3)) * k ) * .3 )
        if k ~= 50 then v.Line:setColor(Lasers[k+1].Line:getColor()) end
        v:calculateXYZ()
        v:think(chip())
    end
end)
